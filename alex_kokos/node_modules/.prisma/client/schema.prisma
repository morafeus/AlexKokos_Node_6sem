generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Answers {
  answer_id    Int    @id(map: "PK__Answers__337243185FF54BD7")
  question     String @db.NVarChar(100)
  answers      String @db.NVarChar(300)
  answer_count Int
  answer_right Int
  test_id      Int
  Tests        Tests  @relation(fields: [test_id], references: [test_id], onUpdate: NoAction, map: "FK__Answers__test_id__6D0D32F4")
}

model Courses {
  course_id          Int               @id(map: "PK__Courses__8F1EF7AE9F9E0BDF") @default(autoincrement())
  course_name        String            @db.VarChar(100)
  course_cost        Int
  course_description String?           @db.VarChar(300)
  course_descipline  String            @db.VarChar(100)
  Desciplines        Desciplines       @relation(fields: [course_descipline], references: [descipline_name], onUpdate: NoAction, map: "FK__Courses__course___6754599E")
  Materials          Materials[]
  StudentToCourse    StudentToCourse[]
  TeacherToCourse    TeacherToCourse[]
  Tests              Tests[]
}

model Desciplines {
  descipline_name String     @id(map: "PK__Descipli__27CA63071227075A") @db.VarChar(100)
  Courses         Courses[]
  Teachers        Teachers[]
}

model Materials {
  material_id   Int     @id(map: "PK__Material__6BFE1D281F7F19F7") @default(autoincrement())
  material_name String  @db.NVarChar(100)
  course_id     Int
  material_ingo String? @db.VarChar(3000)
  Courses       Courses @relation(fields: [course_id], references: [course_id], onUpdate: NoAction, map: "FK__Materials__cours__6FE99F9F")
}

model Students {
  user_ident      Int               @id(map: "PK__Students__D39C7BF42B17E615") @default(autoincrement())
  fio             String            @unique(map: "UQ__Students__D9908D6ED10241A0") @db.NVarChar(100)
  balance         Int?
  email           String            @db.NVarChar(100)
  user_password   String            @db.NVarChar(100)
  StudentToCourse StudentToCourse[]
  TestStatus      TestStatus[]
}

model StudentToCourse {
  STC_id     Int      @id(map: "PK__StudentT__482F14E6F439890D") @default(autoincrement())
  course_id  Int
  student_id Int
  Courses    Courses  @relation(fields: [course_id], references: [course_id], onUpdate: NoAction, map: "FK__StudentTo__cours__797309D9")
  Students   Students @relation(fields: [student_id], references: [user_ident], onUpdate: NoAction, map: "FK__StudentTo__stude__7A672E12")
}

model Teachers {
  user_ident      Int               @id(map: "PK__Teachers__D39C7BF4EA6292A8") @default(autoincrement())
  fio             String            @unique(map: "UQ__Teachers__D9908D6EAE22B41B") @db.NVarChar(100)
  email           String            @db.NVarChar(100)
  user_password   String            @db.NVarChar(100)
  descipline      String            @db.VarChar(100)
  Desciplines     Desciplines       @relation(fields: [descipline], references: [descipline_name], onUpdate: NoAction, map: "FK__Teachers__descip__6477ECF3")
  TeacherToCourse TeacherToCourse[]
}

model TeacherToCourse {
  TTC_id     Int      @id(map: "PK__TeacherT__1163A81115CC4E73") @default(autoincrement())
  teacher_id Int
  course_id  Int
  Courses    Courses  @relation(fields: [course_id], references: [course_id], onUpdate: NoAction, map: "FK__TeacherTo__cours__7E37BEF6")
  Teachers   Teachers @relation(fields: [teacher_id], references: [user_ident], onUpdate: NoAction, map: "FK__TeacherTo__teach__7D439ABD")
}

model Tests {
  test_id    Int          @id(map: "PK__Tests__F3FF1C026C7E674B") @default(autoincrement())
  test_name  String       @db.VarChar(50)
  test_desc  String       @db.VarChar(50)
  course_id  Int
  Answers    Answers[]
  Courses    Courses      @relation(fields: [course_id], references: [course_id], onUpdate: NoAction, map: "FK__Tests__course_id__6A30C649")
  TestStatus TestStatus[]
}

model TestStatus {
  status_id  Int      @id(map: "PK__TestStat__3683B53103B4DD19") @default(autoincrement())
  test_id    Int
  student_id Int
  Students   Students @relation(fields: [student_id], references: [user_ident], onUpdate: NoAction, map: "FK__TestStatu__stude__02084FDA")
  Tests      Tests    @relation(fields: [test_id], references: [test_id], onUpdate: NoAction, map: "FK__TestStatu__test___01142BA1")
}
